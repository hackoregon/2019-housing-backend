total_own numeric(6,0),
share_own numeric(5,4),
total_hh_white numeric(6,0),
total_own_white numeric(6,0),
share_own_white numeric(5,4),
total_hh_black numeric(6,0),
total_own_black numeric(6,0),
share_own_black numeric(5,4),
total_hh_aian numeric(6,0),
total_own_aian numeric(6,0),
share_own_aian numeric(5,4),
total_hh_api numeric(6,0),
total_own_api numeric(6,0),
share_own_api numeric(5,4),
total_hh_other numeric(6,0),
total_own_other numeric(6,0),
share_own_other numeric(5,4),
total_hh_multi numeric(6,0),
total_own_multi numeric(6,0),
share_own_multi numeric(5,4),
total_hh_hisp numeric(6,0),
total_own_hisp numeric(6,0),
share_own_hisp numeric(5,4),
share_total_own_white numeric(5,4),
share_total_own_black numeric(5,4),
share_total_own_aian numeric(5,4),
share_total_own_api numeric(5,4),
share_total_own_other numeric(5,4),
share_total_own_multi numeric(5,4),
share_total_own_hisp numeric(5,4)
);"
if(!require(pacman)){install.packages("pacman");library(pacman)}
p_load(tidyverse)
pdx_msa_definition <- c('41005', '41009', '41051', '41067', '41071', '53011', '53059')
### Data came from NHGIS from an extract from Nick Kobel; includes three tables at the
## Census tract level (standardized to 2010): Tables CN1 and CY5 and CZ6
race_tenure <- read_csv("/Users/ctplnnr/projects/ho/nhgis0026_csv/nhgis0026_ts_geog2010_tract.csv")
race_tenure.pdx <- race_tenure %>%
mutate(county_fips = paste0(STATEA, COUNTYA),
tract_fips = paste0(county_fips, TRACTA)) %>%
filter(county_fips %in% pdx_msa_definition) %>%
mutate(total_hh = CN1AA + CN1AB,
total_own = CN1AA,
share_own = total_own / total_hh, # Share of households that are owners
total_hh_white = CY5AA + CY5AG,
total_own_white = CY5AA,
share_own_white = total_own_white / total_hh_white, # Share of white households that are owners
total_hh_black = CY5AB + CY5AH,
total_own_black = CY5AB,
share_own_black = total_own_black / total_hh_black, # Share of Black households that are owners
total_hh_aian = CY5AC + CY5AI, # American Indian/Alaska Native
total_own_aian = CY5AC,
share_own_aian = total_own_aian / total_hh_aian,
total_hh_api = CY5AD + CY5AJ, # Asian/Pacific Islander
total_own_api = CY5AD,
share_own_api = total_own_api / total_hh_api,
total_hh_other = CY5AE + CY5AK,
total_own_other = CY5AE,
share_own_other = total_own_other / total_hh_other,
total_hh_multi = CY5AF + CY5AL,
total_own_multi = CY5AF,
share_own_multi = total_own_multi / total_hh_multi,
total_hh_hisp = CZ6AB + CZ6AD,
total_own_hisp = CZ6AB,
share_own_hisp = total_own_hisp / total_hh_hisp,
share_total_own_white = total_own_white / total_own, # Share of total homeowners that were white
share_total_own_black = total_own_black / total_own, # Share of total homeowners that were Black, etc.
share_total_own_aian = total_own_aian / total_own, # American Indian/Alaska Native
share_total_own_api = total_own_api / total_own, # Asian/Pacific Islander
share_total_own_other = total_own_other / total_own,
share_total_own_multi = total_own_multi / total_own,
share_total_own_hisp = total_own_hisp / total_own) %>%
select(DATAYEAR, tract_fips:share_total_own_hisp)
# install.packages("RPostgreSQL")
require("RPostgreSQL")
pw <- {
"L33tSpekI5ntD3D?"
}
# loads the PostgreSQL driver
drv <- dbDriver("PostgreSQL")
# creates a connection to the postgres database
# note that "con" will be used later in each connection to the database
con <- dbConnect(drv, dbname = "housing-2019-staging",
host = "housing-2019-staging.caicgny9d8nv.us-west-2.rds.amazonaws.com", port = 5432,
user = "housing2019", password = pw)
rm(pw) # removes the password
# check for the total_loans table
dbExistsTable(con, "total_loans")
# sends the command and creates the table
dbGetQuery(con, sql_command)
View(race_tenure.pdx)
sql_command <- "CREATE TABLE race_by_tenure_1990t2010
(
DATAYEAR numeric(4,0),
tract_fips char(11),
total_hh numeric(6,0),
total_own numeric(6,0),
share_own numeric(5,4),
total_hh_white numeric(6,0),
total_own_white numeric(6,0),
share_own_white numeric(5,4),
total_hh_black numeric(6,0),
total_own_black numeric(6,0),
share_own_black numeric(5,4),
total_hh_aian numeric(6,0),
total_own_aian numeric(6,0),
share_own_aian numeric(5,4),
total_hh_api numeric(6,0),
total_own_api numeric(6,0),
share_own_api numeric(5,4),
total_hh_other numeric(6,0),
total_own_other numeric(6,0),
share_own_other numeric(5,4),
total_hh_multi numeric(6,0),
total_own_multi numeric(6,0),
share_own_multi numeric(5,4),
total_hh_hisp numeric(6,0),
total_own_hisp numeric(6,0),
share_own_hisp numeric(5,4),
share_total_own_white numeric(5,4),
share_total_own_black numeric(5,4),
share_total_own_aian numeric(5,4),
share_total_own_api numeric(5,4),
share_total_own_other numeric(5,4),
share_total_own_multi numeric(5,4),
share_total_own_hisp numeric(5,4)
);"
# sends the command and creates the table
dbGetQuery(con, sql_command)
dbExistsTable(con, "race_by_tenure_1990t2010")
dbWriteTable(con,'race_by_tenure_1990t2010',race_by_tenure_1990t2010, row.names=FALSE)
View(race_tenure.pdx)
race_tenure.pdx
dbWriteTable(con,'race_by_tenure_1990t2010',race_tenure.pdx, row.names=FALSE)
sql_command_remove <- "DROP TABLE race_by_tenure_1990t2010"
dbSendQuery(con, sql_command_remove)
dbExistsTable(con, "race_by_tenure_1990t2010")
dbWriteTable(con,'race_by_tenure_1990t2010',race_tenure.pdx, row.names=FALSE)
dbExistsTable(con, "race_by_tenure_1990t2010")
dbExistsTable(con, "race_by_tenure_1990t2010")
race_tenure <- read_csv(unz("nhgis0026_csv.zip", "nhgis0026_ts_geog2010_tract.csv"))
race_tenure <- read_csv("nhgis0026_csv.zip")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
race_tenure <- read_csv("./data/nhgis0026_csv.zip")
race_tenure <- read_csv("././data/nhgis0026_csv.zip")
getwd()
race_tenure <- read_csv("../data/nhgis0026_csv.zip")
### Data came from NHGIS from an extract from Nick Kobel; includes three tables at the
## Census tract level (standardized to 2010): Tables CN1 and CY5 and CZ6
race_tenure <- read_csv("/Users/ctplnnr/projects/ho/nhgis0026_csv/nhgis0026_ts_geog2010_tract.csv")
##### Load libraries, set working directory #####
if(!require(pacman)){install.packages("pacman");library(pacman)}
p_load(tidyverse)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
pdx_msa_definition <- c('41005', '41009', '41051', '41067', '41071', '53011', '53059')
### Data came from NHGIS from an extract from Nick Kobel; includes three tables at the
## Census tract level (standardized to 2010): Tables CN1 and CY5 and CZ6
race_tenure <- read_csv("../data/nhgis0026_csv.zip")
race_tenure.pdx <- race_tenure %>%
mutate(county_fips = paste0(STATEA, COUNTYA),
tract_fips = paste0(county_fips, TRACTA)) %>%
filter(county_fips %in% pdx_msa_definition) %>%
mutate(total_hh = CN1AA + CN1AB,
total_own = CN1AA,
share_own = total_own / total_hh, # Share of households that are owners
total_hh_white = CY5AA + CY5AG,
total_own_white = CY5AA,
share_own_white = total_own_white / total_hh_white, # Share of white households that are owners
total_hh_black = CY5AB + CY5AH,
total_own_black = CY5AB,
share_own_black = total_own_black / total_hh_black, # Share of Black households that are owners
total_hh_aian = CY5AC + CY5AI, # American Indian/Alaska Native
total_own_aian = CY5AC,
share_own_aian = total_own_aian / total_hh_aian,
total_hh_api = CY5AD + CY5AJ, # Asian/Pacific Islander
total_own_api = CY5AD,
share_own_api = total_own_api / total_hh_api,
total_hh_other = CY5AE + CY5AK,
total_own_other = CY5AE,
share_own_other = total_own_other / total_hh_other,
total_hh_multi = CY5AF + CY5AL,
total_own_multi = CY5AF,
share_own_multi = total_own_multi / total_hh_multi,
total_hh_hisp = CZ6AB + CZ6AD,
total_own_hisp = CZ6AB,
share_own_hisp = total_own_hisp / total_hh_hisp,
share_total_own_white = total_own_white / total_own, # Share of total homeowners that were white
share_total_own_black = total_own_black / total_own, # Share of total homeowners that were Black, etc.
share_total_own_aian = total_own_aian / total_own, # American Indian/Alaska Native
share_total_own_api = total_own_api / total_own, # Asian/Pacific Islander
share_total_own_other = total_own_other / total_own,
share_total_own_multi = total_own_multi / total_own,
share_total_own_hisp = total_own_hisp / total_own) %>%
select(DATAYEAR, tract_fips:share_total_own_hisp)
# install.packages("RPostgreSQL")
require("RPostgreSQL")
# create a connection
# source the postgresql password
source("../server_password.R") # pw <- {'PASSWORD'}
# loads the PostgreSQL driver
drv <- dbDriver("PostgreSQL")
# creates a connection to the postgres database
# note that "con" will be used later in each connection to the database
con <- dbConnect(drv, dbname = "housing-2019-staging",
host = "housing-2019-staging.caicgny9d8nv.us-west-2.rds.amazonaws.com", port = 5432,
user = "housing2019", password = pw)
rm(pw) # removes the password
dbExistsTable(con, "race_by_tenure_1990t2010")
if(dbExistsTable(con, "race_by_tenure_1990t2010")){
}
else{
dbWriteTable(con, "race_by_tenure_1990t2010", race_tenure.pdx, row.names = FALSE)
}
ifelse(dbExistsTable(con, "race_by_tenure_1990t2010"),
NULL,
dbWriteTable(con, "race_by_tenure_1990t2010", race_tenure.pdx, row.names = FALSE)
)
if (!(dbExistsTable(con, "race_by_tenure_1990t2010"))) {
dbWriteTable(con, "race_by_tenure_1990t2010", race_tenure.pdx, row.names = FALSE)
}
if (!(dbExistsTable(con, "race_by_tenure_1990t2010"))) {
dbWriteTable(con, "race_by_tenure_1990t2010", race_tenure.pdx, row.names = FALSE)
} else {
print("Already in db.")
}
View(race_tenure.pdx)
race_tenure.pdx%>%filter(DATAYEAR==1990)%>%select(total_hh)%>%summarize()
race_tenure.pdx%>%filter(DATAYEAR==1990)%>%select(total_hh)%>%summary()
race_tenure.pdx%>%filter(DATAYEAR==1990)%>%select(total_hh_black)%>%summary()
race_tenure.pdx%>%filter(DATAYEAR==2000)%>%select(total_hh_black)%>%summary()
race_tenure.pdx%>%filter(DATAYEAR==1990)%>%select(total_hh_black)%>%mapview()
library(mapview)
race_tenure.pdx%>%filter(DATAYEAR==1990)%>%select(total_hh_black)%>%mapview()
race_tenure.pdx%>%filter(DATAYEAR==1990)%>%select(total_hh_black)
race_tenure.pdx%>%filter(DATAYEAR==1990)%>%select(total_hh_black)%>%ggplot(aes(y = total_hh_black))+geom_histogram()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
saveRDS(race_tenure.pdx, "../data/cleaned_data/race_by_tenure_1990t2010.RDS")
##### Load libraries, set working directory #####
if(!require(pacman)){install.packages("pacman");library(pacman)}
p_load(tidyverse, RPostgreSQL)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
##### Posting to PostGRES database #####
# source the postgresql password
source("../server_password.R") # pw <- {'PASSWORD'}
race_by_tenure_1990t2010 <- readRDS("../data/cleaned_data/race_by_tenure_1990t2010.RDS")
# loads the PostgreSQL driver
drv <- dbDriver("PostgreSQL")
# creates a connection to the postgres database
# note that "con" will be used later in each connection to the database
con <- dbConnect(drv, dbname = "housing-2019-staging",
host = "housing-2019-staging.caicgny9d8nv.us-west-2.rds.amazonaws.com", port = 5432,
user = "housing2019", password = pw)
rm(pw) # removes the password
if (!(dbExistsTable(con, "race_by_tenure_1990t2010"))) {
dbWriteTable(con, "race_by_tenure_1990t2010", race_by_tenure_1990t2010, row.names = FALSE)
} else {
print("Already in db.")
}
View(race_tenure)
View(race_tenure.pdx)
race_tenure.pdx %>%
filter(DATAYEAR == 1990) %>%
summarize_all(sum)
race_tenure.pdx %>%
group_by(DATAYEAR) %>%
summarize_at(vars(total_hh, total_hh_white, total_hh_black), sum, na.rm=T)
##### Load libraries, set working directory #####
if(!require(pacman)){install.packages("pacman");library(pacman)}
p_load(tidyverse, RPostgreSQL)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
##### Posting to PostGRES database #####
# source the postgresql password
source("../server_password.R") # pw <- {'PASSWORD'}
race_by_tenure_1990t2010 <- readRDS("../data/cleaned_data/race_by_tenure_1990t2010.RDS")
# loads the PostgreSQL driver
drv <- dbDriver("PostgreSQL")
# creates a connection to the postgres database
# note that "con" will be used later in each connection to the database
con <- dbConnect(drv, dbname = "housing-2019-staging",
host = "housing-2019-staging.caicgny9d8nv.us-west-2.rds.amazonaws.com", port = 5432,
user = "housing2019", password = pw)
rm(pw) # removes the password
race_tenure.pdx_postgresql <- dbGetQuery(con, "SELECT * from race_by_tenure_1990t2010")
race_tenure.pdx_postgresql %>%
group_by(DATAYEAR) %>%
summarize_at(vars(total_hh, total_hh_white, total_hh_black), sum, na.rm=T)
homeownership_by_race_2017 <- get_acs(geography = "tract",
state = c("OR", "WA"),
county = pdxcnty,
survey = "acs5",
year = 2017,
output = 'wide',
cache_table = TRUE,
geometry = TRUE,
variables = c('B25003_001', 'B25003_002', 'B25003_003',
'B25003A_001', 'B25003A_002', 'B25003A_003',
'B25003B_001', 'B25003B_002', 'B25003B_003',
'B25003C_001', 'B25003C_002', 'B25003C_003',
'B25003D_001', 'B25003D_002', 'B25003D_003',
'B25003E_001', 'B25003E_002', 'B25003E_003',
'B25003F_001', 'B25003F_002', 'B25003F_003',
'B25003G_001', 'B25003G_002', 'B25003G_003',
'B25003H_001', 'B25003H_002', 'B25003H_003',
'B25003I_001', 'B25003I_002', 'B25003I_003'))
p_load(tidyverse, tidycensus)
homeownership_by_race_2017 <- get_acs(geography = "tract",
state = c("OR", "WA"),
county = pdxcnty,
survey = "acs5",
year = 2017,
output = 'wide',
cache_table = TRUE,
geometry = TRUE,
variables = c('B25003_001', 'B25003_002', 'B25003_003',
'B25003A_001', 'B25003A_002', 'B25003A_003',
'B25003B_001', 'B25003B_002', 'B25003B_003',
'B25003C_001', 'B25003C_002', 'B25003C_003',
'B25003D_001', 'B25003D_002', 'B25003D_003',
'B25003E_001', 'B25003E_002', 'B25003E_003',
'B25003F_001', 'B25003F_002', 'B25003F_003',
'B25003G_001', 'B25003G_002', 'B25003G_003',
'B25003H_001', 'B25003H_002', 'B25003H_003',
'B25003I_001', 'B25003I_002', 'B25003I_003'))
pdxcnty <- substr(pdx_msa_definition, start = 3, stop = 5)
homeownership_by_race_2017 <- get_acs(geography = "tract",
state = c("OR", "WA"),
county = pdxcnty,
survey = "acs5",
year = 2017,
output = 'wide',
cache_table = TRUE,
geometry = TRUE,
variables = c('B25003_001', 'B25003_002', 'B25003_003',
'B25003A_001', 'B25003A_002', 'B25003A_003',
'B25003B_001', 'B25003B_002', 'B25003B_003',
'B25003C_001', 'B25003C_002', 'B25003C_003',
'B25003D_001', 'B25003D_002', 'B25003D_003',
'B25003E_001', 'B25003E_002', 'B25003E_003',
'B25003F_001', 'B25003F_002', 'B25003F_003',
'B25003G_001', 'B25003G_002', 'B25003G_003',
'B25003H_001', 'B25003H_002', 'B25003H_003',
'B25003I_001', 'B25003I_002', 'B25003I_003'))
homeownership_by_race_2017 <- get_acs(geography = "tract",
state = c("OR", "WA"),
county = pdxcnty,
survey = "acs5",
year = 2017,
output = 'wide',
cache_table = TRUE,
geometry = FALSE,
variables = c('B25003_001', 'B25003_002', 'B25003_003',
'B25003A_001', 'B25003A_002', 'B25003A_003',
'B25003B_001', 'B25003B_002', 'B25003B_003',
'B25003C_001', 'B25003C_002', 'B25003C_003',
'B25003D_001', 'B25003D_002', 'B25003D_003',
'B25003E_001', 'B25003E_002', 'B25003E_003',
'B25003F_001', 'B25003F_002', 'B25003F_003',
'B25003G_001', 'B25003G_002', 'B25003G_003',
'B25003H_001', 'B25003H_002', 'B25003H_003',
'B25003I_001', 'B25003I_002', 'B25003I_003'))
homeownership_by_race_2017_2 <- homeownership_by_race_2017 %>%
filter(GEOID %in% msa_tracts) %>%
mutate(DATAYEAR = 2017,
tract_fips = GEOID,
total_hh = B25003_001E,
total_own = B25003_002E,
share_own = total_own / total_hh, # Share of households that are owners
total_hh_white = B25003A_001E,
total_own_white = B25003A_002E,
share_own_white = total_own_white / total_hh_white, # Share of white households that are owners
total_hh_black = B25003B_001E,
total_own_black = B25003B_002E,
share_own_black = total_own_black / total_hh_black, # Share of Black households that are owners
total_hh_aian = B25003C_001E, # American Indian/Alaska Native
total_own_aian = B25003C_002E,
share_own_aian = total_own_aian / total_hh_aian,
total_hh_api = B25003D_001E + B25003E_001E, # Asian/Pacific Islander
total_own_api = B25003D_002E + B25003E_002E,
share_own_api = total_own_api / total_hh_api,
total_hh_other = B25003F_001E,
total_own_other = B25003F_002E,
share_own_other = total_own_other / total_hh_other,
total_hh_multi = B25003G_001E,
total_own_multi = B25003G_002E,
share_own_multi = total_own_multi / total_hh_multi,
total_hh_hisp = B25003I_001E,
total_own_hisp = B25003I_002E,
share_own_hisp = total_own_hisp / total_hh_hisp,
share_total_own_white = total_own_white / total_own, # Share of total homeowners that were white
share_total_own_black = total_own_black / total_own, # Share of total homeowners that were Black, etc.
share_total_own_aian = total_own_aian / total_own, # American Indian/Alaska Native
share_total_own_api = total_own_api / total_own, # Asian/Pacific Islander
share_total_own_other = total_own_other / total_own,
share_total_own_multi = total_own_multi / total_own,
share_total_own_hisp = total_own_hisp / total_own) %>%
select(DATAYEAR:share_total_own_hisp)
homeownership_by_race_2017_2 <- homeownership_by_race_2017 %>%
mutate(county = substr(GEOID, start = 1, stop = 5)) %>%
filter(county %in% pdxcnty) %>%
mutate(DATAYEAR = 2017,
tract_fips = GEOID,
total_hh = B25003_001E,
total_own = B25003_002E,
share_own = total_own / total_hh, # Share of households that are owners
total_hh_white = B25003A_001E,
total_own_white = B25003A_002E,
share_own_white = total_own_white / total_hh_white, # Share of white households that are owners
total_hh_black = B25003B_001E,
total_own_black = B25003B_002E,
share_own_black = total_own_black / total_hh_black, # Share of Black households that are owners
total_hh_aian = B25003C_001E, # American Indian/Alaska Native
total_own_aian = B25003C_002E,
share_own_aian = total_own_aian / total_hh_aian,
total_hh_api = B25003D_001E + B25003E_001E, # Asian/Pacific Islander
total_own_api = B25003D_002E + B25003E_002E,
share_own_api = total_own_api / total_hh_api,
total_hh_other = B25003F_001E,
total_own_other = B25003F_002E,
share_own_other = total_own_other / total_hh_other,
total_hh_multi = B25003G_001E,
total_own_multi = B25003G_002E,
share_own_multi = total_own_multi / total_hh_multi,
total_hh_hisp = B25003I_001E,
total_own_hisp = B25003I_002E,
share_own_hisp = total_own_hisp / total_hh_hisp,
share_total_own_white = total_own_white / total_own, # Share of total homeowners that were white
share_total_own_black = total_own_black / total_own, # Share of total homeowners that were Black, etc.
share_total_own_aian = total_own_aian / total_own, # American Indian/Alaska Native
share_total_own_api = total_own_api / total_own, # Asian/Pacific Islander
share_total_own_other = total_own_other / total_own,
share_total_own_multi = total_own_multi / total_own,
share_total_own_hisp = total_own_hisp / total_own) %>%
select(DATAYEAR:share_total_own_hisp)
homeownership_by_race_2017_2 <- homeownership_by_race_2017 %>%
mutate(county = substr(GEOID, start = 1, stop = 5))
View(homeownership_by_race_2017_2)
homeownership_by_race_2017_2 <- homeownership_by_race_2017 %>%
mutate(county = substr(GEOID, start = 1, stop = 5)) %>%
filter(county %in% pdxcnty)
rm(pdxcnty)
pdxcnty <- substr(pdx_msa_definition, start = 3, stop = 5)
homeownership_by_race_2017_2 <- homeownership_by_race_2017 %>%
mutate(county = substr(GEOID, start = 1, stop = 5)) %>%
filter(county %in% pdx_msa_definition) %>%
mutate(DATAYEAR = 2017,
tract_fips = GEOID,
total_hh = B25003_001E,
total_own = B25003_002E,
share_own = total_own / total_hh, # Share of households that are owners
total_hh_white = B25003A_001E,
total_own_white = B25003A_002E,
share_own_white = total_own_white / total_hh_white, # Share of white households that are owners
total_hh_black = B25003B_001E,
total_own_black = B25003B_002E,
share_own_black = total_own_black / total_hh_black, # Share of Black households that are owners
total_hh_aian = B25003C_001E, # American Indian/Alaska Native
total_own_aian = B25003C_002E,
share_own_aian = total_own_aian / total_hh_aian,
total_hh_api = B25003D_001E + B25003E_001E, # Asian/Pacific Islander
total_own_api = B25003D_002E + B25003E_002E,
share_own_api = total_own_api / total_hh_api,
total_hh_other = B25003F_001E,
total_own_other = B25003F_002E,
share_own_other = total_own_other / total_hh_other,
total_hh_multi = B25003G_001E,
total_own_multi = B25003G_002E,
share_own_multi = total_own_multi / total_hh_multi,
total_hh_hisp = B25003I_001E,
total_own_hisp = B25003I_002E,
share_own_hisp = total_own_hisp / total_hh_hisp,
share_total_own_white = total_own_white / total_own, # Share of total homeowners that were white
share_total_own_black = total_own_black / total_own, # Share of total homeowners that were Black, etc.
share_total_own_aian = total_own_aian / total_own, # American Indian/Alaska Native
share_total_own_api = total_own_api / total_own, # Asian/Pacific Islander
share_total_own_other = total_own_other / total_own,
share_total_own_multi = total_own_multi / total_own,
share_total_own_hisp = total_own_hisp / total_own) %>%
select(DATAYEAR:share_total_own_hisp)
View(homeownership_by_race_2017_2)
race_by_tenure_1990t2017 <- rbind(homeownership_by_race_2017_2, race_tenure.pdx)
saveRDS(race_by_tenure_1990t2017, "../data/cleaned_data/race_by_tenure_1990t2017.RDS")
View(race_by_tenure_1990t2017)
##### Load libraries, set working directory #####
if(!require(pacman)){install.packages("pacman");library(pacman)}
p_load(tidyverse, RPostgreSQL)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
##### Posting to PostGRES database #####
# source the postgresql password
source("../server_password.R") # pw <- {'PASSWORD'}
race_by_tenure_1990t2010 <- readRDS("../data/cleaned_data/race_by_tenure_1990t2017.RDS")
race_by_tenure_1990t2017 <- readRDS("../data/cleaned_data/race_by_tenure_1990t2017.RDS")
# loads the PostgreSQL driver
drv <- dbDriver("PostgreSQL")
# creates a connection to the postgres database
# note that "con" will be used later in each connection to the database
con <- dbConnect(drv, dbname = "housing-2019-staging",
host = "housing-2019-staging.caicgny9d8nv.us-west-2.rds.amazonaws.com", port = 5432,
user = "housing2019", password = pw)
rm(pw) # removes the password
if (!(dbExistsTable(con, "race_by_tenure_1990t2017"))) {
dbWriteTable(con, "race_by_tenure_1990t2017", race_by_tenure_1990t2017, row.names = FALSE)
} else {
print("Table already in database")
}
dbSendQuery(con, "DROP TABLE race_by_tenure_1990t2010")
race_tenure.pdx_postgresql <- dbGetQuery(con, "SELECT * from race_by_tenure_1990t2017")
race_tenure.pdx_postgresql
##### Load libraries, set working directory #####
if(!require(pacman)){install.packages("pacman");library(pacman)}
p_load(tidyverse, tigris, tidycensus, rio, viridis, sf, mapview, mapview)
options(tigris_use_cache = T); options(tigris_class = "sf")
